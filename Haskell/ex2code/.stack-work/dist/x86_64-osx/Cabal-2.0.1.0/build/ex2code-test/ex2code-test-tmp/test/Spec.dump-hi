
==================== FINAL INTERFACE ====================
2018-11-19 17:46:09.517022 UTC

interface main:Main 8022
  interface hash: 34771f3fb7d2543feb7f3b48ed31f637
  ABI hash: 3c3fc1a4e6f7ea05fcf5e524aa384c33
  export-list hash: f44245fa768c77f024503d9a537344d6
  orphan hash: c8fee29085cc2416ac6f6824d921da89
  flag hash: 498e9fd40e82c9bd23f3890b962399c6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3
                      ansi-terminal-0.8.0.4 array-0.5.2.0 base-4.10.1.0 call-stack-0.1.0
                      clock-0.7.2 colour-2.3.4 containers-0.5.10.2 deepseq-1.4.3.0
                      directory-1.3.0.2 ex2code-0.1.0.0 filepath-1.4.1.2
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 hspec-2.5.4 hspec-core-2.5.4
                      hspec-expectations-0.8.2 integer-gmp-1.0.1.0 pretty-1.1.3.3
                      primitive-0.6.4.0 quickcheck-io-0.2.0 random-1.1 setenv-0.1.1.3
                      stm-2.4.5.0 template-haskell-2.12.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.2.0 unix-2.7.2.2
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         stm-2.4.5.0:Control.Monad.STM
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats clock-0.7.2:System.Clock
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         hspec-core-2.5.4:Test.Hspec.Core.Example
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck fa49a6331086b5932e924d9bc61b926c
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Gen 9b839dc612c2c75df9c65dfaaf56c69c
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property c7ee9675ea65df1a53544321f071fac5
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ex2code-0.1.0.0:Lib d250fb8a886dde581d3bb2e33b5b081a
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hspec-2.5.4:Test.Hspec f48b6afb214a0109890cecfc03ce3670
import  -/  hspec-core-2.5.4:Test.Hspec.Core.Runner 361c6ffaf0d3adc461305af2e86574bb
import  -/  hspec-core-2.5.4:Test.Hspec.Core.Spec 0d401eb33be6efe664a514e59f7071c0
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 8bc0d926d5b42398a254e04604809fe4
4a234bfd863e53ae37edc98d959534eb
  $s$fEqMaybe :: GHC.Classes.Eq (Lib.Maybe GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Lib.Maybe GHC.Types.Int)
                  (\ (ds2 :: Lib.Maybe GHC.Types.Int)
                     (ds3 :: Lib.Maybe GHC.Types.Int) ->
                   case ds2 of wild {
                     Lib.Some a1
                     -> case ds3 of wild1 {
                          Lib.Some b1 -> GHC.Classes.eqInt a1 b1
                          Lib.None -> GHC.Types.False }
                     Lib.None
                     -> case ds3 of wild1 {
                          Lib.Some ipv -> GHC.Types.False Lib.None -> GHC.Types.True } })
                  (\ (a1 :: Lib.Maybe GHC.Types.Int)
                     (b :: Lib.Maybe GHC.Types.Int) ->
                   case a1 of wild {
                     Lib.Some a2
                     -> case b of wild1 {
                          Lib.Some b1
                          -> case GHC.Classes.eqInt a2 b1 of wild2 {
                               GHC.Types.False -> GHC.Types.True
                               GHC.Types.True -> GHC.Types.False }
                          Lib.None -> GHC.Types.True }
                     Lib.None
                     -> case b of wild1 {
                          Lib.Some ipv -> GHC.Types.True Lib.None -> GHC.Types.False } }) -}
e37b989cb6f69b0d2af133fd33cba43e
  $s$fShowMaybe :: GHC.Show.Show (Lib.Maybe GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Lib.Maybe GHC.Types.Int)
                  (Lib.$fShowMaybe_$cshowsPrec @ GHC.Types.Int GHC.Show.$fShowInt)
                  (\ (x :: Lib.Maybe GHC.Types.Int) ->
                   case x of wild {
                     Lib.Some b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Lib.$fShowMaybe5)
                          (GHC.Show.showSignedInt
                             Lib.$fShowMaybe7
                             b1
                             (GHC.Types.[] @ GHC.Types.Char))
                     Lib.None -> Lib.$fShowMaybe3 })
                  (\ (eta :: [Lib.Maybe GHC.Types.Int]) (eta37 :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Lib.Maybe GHC.Types.Int)
                     (Lib.$fShowMaybe_$cshowsPrec
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        Lib.$fShowMaybe1)
                     eta
                     eta37) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
59013243d0413927501d8d0c13e5f6e2
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f7f2a1e46a5e4f7ad858e27601cd6a56
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Test.Hspec.Core.Config.Options.defaultConfig
                        Main.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        s of ds2 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds3 ds4 ->
                 case ds4 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
deb1e4eeefa1ed9b4424f9b61d064210
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U> -}
287fb6da9b8dd0787d8a8a4b9838d7a0
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $fEqMaybe @ Int" [orphan] forall (v :: GHC.Classes.Eq
                                                    GHC.Types.Int)
  Lib.$fEqMaybe @ GHC.Types.Int v = Main.$s$fEqMaybe
"SPEC/Main $fShowMaybe @ Int" [orphan] forall (v :: GHC.Show.Show
                                                      GHC.Types.Int)
  Lib.$fShowMaybe @ GHC.Types.Int v = Main.$s$fShowMaybe
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

